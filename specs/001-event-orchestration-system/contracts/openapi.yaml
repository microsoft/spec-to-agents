openapi: 3.1.0
info:
  title: Event Orchestration System (EODS) API
  version: 0.1.0
  description: |
    REST API for the Event Orchestration System - a declarative, spec-driven 
    multi-agent system for end-to-end event planning and execution.
    
    **Key Features**:
    - Multi-agent orchestration (Event Planner, Venue Researcher, Budget Analyst, Logistics Coordinator)
    - 22 artifact types with versioning and validation
    - 8-state lifecycle management (Initiate → Plan → Research → Budget → Logistics → Confirm → Execute → Postmortem)
    - Quality gates and human approval workflows
    - Real-time agent status via WebSocket
    
  contact:
    name: EODS Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://eods-api.azurecontainerapps.io
    description: Production (Azure Container Apps)
  - url: http://localhost:8000
    description: Local Development

security:
  - AzureAD: []

tags:
  - name: EventBriefs
    description: Event planning sessions and lifecycle management
  - name: Planning
    description: Requirements, stakeholders, timelines, and tasks
  - name: Venues
    description: Venue research, scoring, and selection
  - name: Budget
    description: Budget baselines, cost models, and approvals
  - name: Logistics
    description: Operational plans, schedules, resources, and contingencies
  - name: Agents
    description: Agent orchestration and status monitoring
  - name: Artifacts
    description: Generic artifact queries and version management
  - name: Approvals
    description: Human approval workflows

paths:
  # ============================================================
  # EventBriefs Endpoints
  # ============================================================
  /api/event-briefs:
    post:
      tags: [EventBriefs]
      operationId: createEventBrief
      summary: Create a new event planning session
      description: |
        Initializes a new EventBrief with specified parameters. 
        Sets lifecycle_state to "Initiate" by default.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventBriefCreate'
      responses:
        '201':
          description: EventBrief created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventBrief'
        '400':
          description: Validation error (invalid dates, negative audience size, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    get:
      tags: [EventBriefs]
      operationId: listEventBriefs
      summary: List all event briefs with optional filtering
      parameters:
        - name: lifecycle_state
          in: query
          schema:
            $ref: '#/components/schemas/LifecycleState'
        - name: event_type
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of event briefs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventBrief'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /api/event-briefs/{eventBriefId}:
    get:
      tags: [EventBriefs]
      operationId: getEventBrief
      summary: Get event brief by ID
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: EventBrief details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventBrief'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    patch:
      tags: [EventBriefs]
      operationId: updateEventBrief
      summary: Update event brief (partial update)
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventBriefUpdate'
      responses:
        '200':
          description: EventBrief updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventBrief'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    delete:
      tags: [EventBriefs]
      operationId: deleteEventBrief
      summary: Delete event brief and all related artifacts
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '204':
          description: EventBrief deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /api/event-briefs/{eventBriefId}/transition:
    post:
      tags: [EventBriefs]
      operationId: transitionLifecycleState
      summary: Transition event brief to next lifecycle state
      description: |
        Validates quality gates before transitioning. 
        Returns 409 if preconditions not met.
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [target_state]
              properties:
                target_state:
                  $ref: '#/components/schemas/LifecycleState'
      responses:
        '200':
          description: State transition successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventBrief'
        '409':
          description: Preconditions not met (quality gate failure)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  missing_artifacts:
                    type: array
                    items:
                      type: string
                  failed_gates:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  
  # ============================================================
  # Planning Endpoints (Requirements, Timeline, Tasks)
  # ============================================================
  /api/event-briefs/{eventBriefId}/requirements:
    post:
      tags: [Planning]
      operationId: createRequirements
      summary: Create requirements for event brief
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequirementsCreate'
      responses:
        '201':
          description: Requirements created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    
    get:
      tags: [Planning]
      operationId: getRequirements
      summary: Get requirements for event brief
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Requirements details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirements'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/event-briefs/{eventBriefId}/timeline:
    post:
      tags: [Planning]
      operationId: createTimeline
      summary: Create timeline with milestones and dependencies
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimelineCreate'
      responses:
        '201':
          description: Timeline created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeline'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Planning]
      operationId: getTimeline
      summary: Get timeline for event brief
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Timeline details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeline'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/event-briefs/{eventBriefId}/tasks:
    post:
      tags: [Planning]
      operationId: createTask
      summary: Add task to task register
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRegisterCreate'
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskRegister'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Planning]
      operationId: listTasks
      summary: List all tasks for event brief
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskRegister'
  
  # ============================================================
  # Venue Endpoints
  # ============================================================
  /api/event-briefs/{eventBriefId}/venue-criteria:
    post:
      tags: [Venues]
      operationId: createVenueCriteria
      summary: Define venue selection criteria
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueCriteriaCreate'
      responses:
        '201':
          description: Venue criteria created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueCriteria'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Venues]
      operationId: getVenueCriteria
      summary: Get venue criteria
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Venue criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueCriteria'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/event-briefs/{eventBriefId}/venue-shortlist:
    post:
      tags: [Venues]
      operationId: addVenueToShortlist
      summary: Add venue to shortlist
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueShortlistCreate'
      responses:
        '201':
          description: Venue added to shortlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueShortlist'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Venues]
      operationId: getVenueShortlist
      summary: Get all shortlisted venues
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: List of shortlisted venues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VenueShortlist'
  
  /api/event-briefs/{eventBriefId}/venue-scorecard:
    post:
      tags: [Venues]
      operationId: createVenueScorecard
      summary: Create venue scorecard with weighted criteria
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueScorecardCreate'
      responses:
        '201':
          description: Venue scorecard created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueScorecard'
        '400':
          description: Validation error (e.g., weights don't sum to 1.0)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      tags: [Venues]
      operationId: getVenueScorecard
      summary: Get venue scorecard
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Venue scorecard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VenueScorecard'
        '404':
          $ref: '#/components/responses/NotFound'
  
  # ============================================================
  # Budget Endpoints
  # ============================================================
  /api/event-briefs/{eventBriefId}/budget-baseline:
    post:
      tags: [Budget]
      operationId: createBudgetBaseline
      summary: Create budget baseline
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetBaselineCreate'
      responses:
        '201':
          description: Budget baseline created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetBaseline'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Budget]
      operationId: getBudgetBaseline
      summary: Get budget baseline
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Budget baseline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetBaseline'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/event-briefs/{eventBriefId}/cost-model:
    post:
      tags: [Budget]
      operationId: createCostModel
      summary: Create detailed cost model
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostModelCreate'
      responses:
        '201':
          description: Cost model created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostModel'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Budget]
      operationId: getCostModel
      summary: Get cost model
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Cost model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostModel'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/event-briefs/{eventBriefId}/budget-decision:
    post:
      tags: [Budget]
      operationId: createBudgetDecision
      summary: Submit budget for approval
      description: |
        Requires human approval. Creates pending approval record.
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetDecisionCreate'
      responses:
        '201':
          description: Budget decision created (pending approval)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetDecision'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Budget]
      operationId: getBudgetDecision
      summary: Get budget decision
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Budget decision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetDecision'
        '404':
          $ref: '#/components/responses/NotFound'
  
  # ============================================================
  # Logistics Endpoints
  # ============================================================
  /api/event-briefs/{eventBriefId}/logistics-plan:
    post:
      tags: [Logistics]
      operationId: createLogisticsPlan
      summary: Create logistics plan
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogisticsPlanCreate'
      responses:
        '201':
          description: Logistics plan created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogisticsPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
    
    get:
      tags: [Logistics]
      operationId: getLogisticsPlan
      summary: Get logistics plan
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Logistics plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogisticsPlan'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/event-briefs/{eventBriefId}/schedule:
    post:
      tags: [Logistics]
      operationId: createSchedule
      summary: Create event schedule
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreate'
      responses:
        '201':
          description: Schedule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: Resource conflict detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      tags: [Logistics]
      operationId: getSchedule
      summary: Get event schedule
      parameters:
        - $ref: '#/components/parameters/EventBriefId'
      responses:
        '200':
          description: Event schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFound'
  
  # ============================================================
  # Agent Orchestration Endpoints
  # ============================================================
  /api/agents/orchestrate:
    post:
      tags: [Agents]
      operationId: orchestrateAgents
      summary: Trigger multi-agent orchestration for event brief
      description: |
        Starts agent orchestration workflow for given event brief and instruction level.
        Returns session ID for status tracking.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [event_brief_id, instruction_level]
              properties:
                event_brief_id:
                  type: string
                instruction_level:
                  type: string
                  enum: [Beginner, Intermediate, Advanced]
                target_phase:
                  type: string
                  description: Optional target lifecycle state to reach
                  enum: [Plan, Research, Budget, Logistics, Confirm]
      responses:
        '202':
          description: Orchestration started
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  status:
                    type: string
                    enum: [in_progress]
                  websocket_url:
                    type: string
                    format: uri
                    description: WebSocket URL for real-time status updates
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: EventBrief not found
  
  /api/agents/sessions/{sessionId}:
    get:
      tags: [Agents]
      operationId: getAgentSession
      summary: Get agent orchestration session status
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session status
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                  event_brief_id:
                    type: string
                  status:
                    type: string
                    enum: [in_progress, completed, failed]
                  current_agent:
                    type: string
                  artifacts_generated:
                    type: array
                    items:
                      type: object
                      properties:
                        artifact_type:
                          type: string
                        artifact_id:
                          type: string
                  errors:
                    type: array
                    items:
                      type: string
        '404':
          $ref: '#/components/responses/NotFound'
  
  /api/agents/{agentName}/status:
    get:
      tags: [Agents]
      operationId: getAgentStatus
      summary: Get current status of specific agent
      parameters:
        - name: agentName
          in: path
          required: true
          schema:
            type: string
            enum: [event-planner, venue-researcher, budget-analyst, logistics-coordinator]
      responses:
        '200':
          description: Agent status
          content:
            application/json:
              schema:
                type: object
                properties:
                  agent_name:
                    type: string
                  state:
                    type: string
                    enum: [idle, thinking, responding, waiting_approval, error]
                  current_task:
                    type: string
                  progress_percentage:
                    type: integer
                    minimum: 0
                    maximum: 100
  
  # ============================================================
  # Approval Endpoints
  # ============================================================
  /api/approvals/pending:
    get:
      tags: [Approvals]
      operationId: listPendingApprovals
      summary: List all pending approvals for current user
      responses:
        '200':
          description: List of pending approvals
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    approval_id:
                      type: string
                    approval_type:
                      type: string
                      enum: [budget_decision, vendor_contract, venue_selection]
                    event_brief_id:
                      type: string
                    artifact_id:
                      type: string
                    requested_at:
                      type: string
                      format: date-time
                    details:
                      type: object
  
  /api/approvals/{approvalId}:
    post:
      tags: [Approvals]
      operationId: submitApproval
      summary: Approve or reject pending approval
      parameters:
        - name: approvalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [decision]
              properties:
                decision:
                  type: string
                  enum: [approved, rejected]
                comments:
                  type: string
      responses:
        '200':
          description: Approval decision recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  approval_id:
                    type: string
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'

# ============================================================
# Component Schemas
# ============================================================
components:
  securitySchemes:
    AzureAD:
      type: oauth2
      description: Azure Active Directory OAuth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize
          scopes:
            api://eods/Events.Read: Read event briefs
            api://eods/Events.Write: Create and update event briefs
            api://eods/Approvals.Approve: Approve budget decisions and contracts
  
  parameters:
    EventBriefId:
      name: eventBriefId
      in: path
      required: true
      description: 'Unique event brief identifier (format: evt-YYYYMMDD-name)'
      schema:
        type: string
        pattern: '^evt-[0-9]{8}-[a-z0-9-]+$'
  
  responses:
    Unauthorized:
      description: Unauthorized - Missing or invalid Azure AD token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    BadRequest:
      description: Bad Request - Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  schemas:
    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
        correlation_id:
          type: string
    
    LifecycleState:
      type: string
      enum:
        - Initiate
        - Plan
        - Research
        - Budget
        - Logistics
        - Confirm
        - Execute
        - Postmortem
    
    TaskStatus:
      type: string
      enum:
        - Not Started
        - In Progress
        - Blocked
        - Completed
        - Cancelled
    
    # ========================================
    # EventBrief Schemas
    # ========================================
    EventBriefCreate:
      type: object
      required:
        - title
        - date_range_start
        - date_range_end
        - audience_size
        - event_type
        - objectives
        - constraints
      properties:
        title:
          type: string
          maxLength: 200
        date_range_start:
          type: string
          format: date-time
        date_range_end:
          type: string
          format: date-time
        audience_size:
          type: integer
          minimum: 1
        event_type:
          type: string
          enum: [meetup, conference, workshop, gala, festival]
        objectives:
          type: string
        constraints:
          type: string
    
    EventBriefUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        date_range_start:
          type: string
          format: date-time
        date_range_end:
          type: string
          format: date-time
        audience_size:
          type: integer
          minimum: 1
        objectives:
          type: string
        constraints:
          type: string
    
    EventBrief:
      allOf:
        - $ref: '#/components/schemas/EventBriefCreate'
        - type: object
          required: [id, version, lifecycle_state, created_at, updated_at]
          properties:
            id:
              type: string
            version:
              type: integer
            lifecycle_state:
              $ref: '#/components/schemas/LifecycleState'
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            created_by:
              type: string
    
    # ========================================
    # Planning Schemas
    # ========================================
    RequirementsCreate:
      type: object
      required: [functional_requirements, nonfunctional_requirements, must_haves]
      properties:
        functional_requirements:
          type: array
          items:
            type: string
        nonfunctional_requirements:
          type: array
          items:
            type: string
        must_haves:
          type: array
          items:
            type: string
          minItems: 1
        nice_to_haves:
          type: array
          items:
            type: string
    
    Requirements:
      allOf:
        - $ref: '#/components/schemas/RequirementsCreate'
        - type: object
          required: [id, version, event_brief_id]
          properties:
            id:
              type: string
            version:
              type: integer
            event_brief_id:
              type: string
    
    TimelineCreate:
      type: object
      required: [phases, milestones]
      properties:
        phases:
          type: array
          items:
            type: object
            required: [name, start, end]
            properties:
              name:
                type: string
              start:
                type: string
                format: date
              end:
                type: string
                format: date
        milestones:
          type: array
          items:
            type: object
            required: [name, date]
            properties:
              name:
                type: string
              date:
                type: string
                format: date
              dependencies:
                type: array
                items:
                  type: string
        critical_path:
          type: array
          items:
            type: string
    
    Timeline:
      allOf:
        - $ref: '#/components/schemas/TimelineCreate'
        - type: object
          required: [id, version, event_brief_id]
          properties:
            id:
              type: string
            version:
              type: integer
            event_brief_id:
              type: string
            has_milestones:
              type: boolean
            has_dependencies:
              type: boolean
            has_critical_path:
              type: boolean
            has_orphan_tasks:
              type: boolean
    
    TaskRegisterCreate:
      type: object
      required: [title, description, owner, start_date, end_date]
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
        owner:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        dependencies:
          type: array
          items:
            type: string
    
    TaskRegister:
      allOf:
        - $ref: '#/components/schemas/TaskRegisterCreate'
        - type: object
          required: [id, version, timeline_id, status]
          properties:
            id:
              type: string
            version:
              type: integer
            timeline_id:
              type: string
            status:
              $ref: '#/components/schemas/TaskStatus'
    
    # ========================================
    # Venue Schemas
    # ========================================
    VenueCriteriaCreate:
      type: object
      required: [min_capacity, max_capacity, budget_range_min, budget_range_max]
      properties:
        location_preferences:
          type: array
          items:
            type: string
        min_capacity:
          type: integer
          minimum: 1
        max_capacity:
          type: integer
          minimum: 1
        required_amenities:
          type: array
          items:
            type: string
        accessibility_requirements:
          type: array
          items:
            type: string
        layout_requirements:
          type: string
        budget_range_min:
          type: number
          minimum: 0
        budget_range_max:
          type: number
          minimum: 0
    
    VenueCriteria:
      allOf:
        - $ref: '#/components/schemas/VenueCriteriaCreate'
        - type: object
          required: [id, version, event_brief_id]
          properties:
            id:
              type: string
            version:
              type: integer
            event_brief_id:
              type: string
    
    VenueShortlistCreate:
      type: object
      required: [venue_name, capacity, location, cost_estimate, initial_score]
      properties:
        venue_name:
          type: string
          maxLength: 200
        capacity:
          type: integer
          minimum: 1
        location:
          type: string
        cost_estimate:
          type: number
          minimum: 0
        initial_score:
          type: number
          minimum: 0
          maximum: 1
    
    VenueShortlist:
      allOf:
        - $ref: '#/components/schemas/VenueShortlistCreate'
        - type: object
          required: [id, version, venue_criteria_id]
          properties:
            id:
              type: string
            version:
              type: integer
            venue_criteria_id:
              type: string
    
    VenueScorecardCreate:
      type: object
      required: [criteria_weights, candidate_scores]
      properties:
        criteria_weights:
          type: array
          items:
            type: object
            required: [criterion, weight]
            properties:
              criterion:
                type: string
              weight:
                type: number
                minimum: 0
                maximum: 1
        candidate_scores:
          type: array
          items:
            type: object
            required: [venue_id, scores, total]
            properties:
              venue_id:
                type: string
              scores:
                type: object
                additionalProperties:
                  type: number
                  minimum: 0
                  maximum: 1
              total:
                type: number
                minimum: 0
                maximum: 1
        selected_venue_id:
          type: string
        selection_rationale:
          type: string
    
    VenueScorecard:
      allOf:
        - $ref: '#/components/schemas/VenueScorecardCreate'
        - type: object
          required: [id, version, venue_criteria_id]
          properties:
            id:
              type: string
            version:
              type: integer
            venue_criteria_id:
              type: string
            weights_sum_valid:
              type: boolean
            all_candidates_scored:
              type: boolean
            rationale_captured:
              type: boolean
    
    # ========================================
    # Budget Schemas
    # ========================================
    BudgetBaselineCreate:
      type: object
      required: [total_budget, category_allocations]
      properties:
        total_budget:
          type: number
          minimum: 0.01
        currency:
          type: string
          default: USD
          maxLength: 3
        category_allocations:
          type: array
          items:
            type: object
            required: [category, allocated, percentage]
            properties:
              category:
                type: string
              allocated:
                type: number
                minimum: 0
              percentage:
                type: number
                minimum: 0
                maximum: 1
        assumptions:
          type: string
    
    BudgetBaseline:
      allOf:
        - $ref: '#/components/schemas/BudgetBaselineCreate'
        - type: object
          required: [id, version, event_brief_id]
          properties:
            id:
              type: string
            version:
              type: integer
            event_brief_id:
              type: string
    
    CostModelCreate:
      type: object
      required: [line_items]
      properties:
        line_items:
          type: array
          items:
            type: object
            required: [category, item, quantity, unit_cost, total]
            properties:
              category:
                type: string
              item:
                type: string
              quantity:
                type: integer
                minimum: 1
              unit_cost:
                type: number
                minimum: 0
              total:
                type: number
                minimum: 0
        variance_rules:
          type: object
          properties:
            max_variance_percent:
              type: number
              minimum: 0
              maximum: 100
            require_approval_threshold:
              type: number
              minimum: 0
    
    CostModel:
      allOf:
        - $ref: '#/components/schemas/CostModelCreate'
        - type: object
          required: [id, version, budget_baseline_id]
          properties:
            id:
              type: string
            version:
              type: integer
            budget_baseline_id:
              type: string
    
    BudgetDecisionCreate:
      type: object
      required: [approved_total]
      properties:
        approved_total:
          type: number
          minimum: 0.01
    
    BudgetDecision:
      allOf:
        - $ref: '#/components/schemas/BudgetDecisionCreate'
        - type: object
          required: [id, version, cost_model_id, approved_date, approvals]
          properties:
            id:
              type: string
            version:
              type: integer
            cost_model_id:
              type: string
            approved_date:
              type: string
              format: date-time
            approvals:
              type: array
              items:
                type: object
                required: [approver, role, timestamp]
                properties:
                  approver:
                    type: string
                  role:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
            change_log_ids:
              type: array
              items:
                type: string
    
    # ========================================
    # Logistics Schemas
    # ========================================
    LogisticsPlanCreate:
      type: object
      required: [workflows]
      properties:
        workflows:
          type: array
          items:
            type: object
            required: [workflow, steps]
            properties:
              workflow:
                type: string
              steps:
                type: array
                items:
                  type: string
              resources:
                type: array
                items:
                  type: string
        layouts:
          type: array
          items:
            type: object
            properties:
              area:
                type: string
              layout:
                type: string
              capacity:
                type: integer
        policies:
          type: string
    
    LogisticsPlan:
      allOf:
        - $ref: '#/components/schemas/LogisticsPlanCreate'
        - type: object
          required: [id, version, event_brief_id]
          properties:
            id:
              type: string
            version:
              type: integer
            event_brief_id:
              type: string
            workflows_linked_to_tasks:
              type: boolean
            contingency_triggers_defined:
              type: boolean
            owners_assigned:
              type: boolean
    
    ScheduleCreate:
      type: object
      required: [sessions]
      properties:
        sessions:
          type: array
          items:
            type: object
            required: [title, start, end, location]
            properties:
              title:
                type: string
              start:
                type: string
                format: date-time
              end:
                type: string
                format: date-time
              location:
                type: string
              resources:
                type: array
                items:
                  type: string
    
    Schedule:
      allOf:
        - $ref: '#/components/schemas/ScheduleCreate'
        - type: object
          required: [id, version, logistics_plan_id]
          properties:
            id:
              type: string
            version:
              type: integer
            logistics_plan_id:
              type: string
            has_resource_conflicts:
              type: boolean
